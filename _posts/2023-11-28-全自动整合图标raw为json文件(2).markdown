---
layout: post
title: "全自动整合图标raw为json文件(2)"
subtitle:   " \"Automatic integration of icon json files(2)\""
date: 2023-11-28 16:18:00 +0800
author:     "Levi"
header-img: "img/bg/image_19.jpg"
catalog: true
tags:
    - 教程 
    - workflow
---

### 全自动整合图标raw为json文件(2)

#### 简介
作者：[Levi](https://github.com/czy13724)
更新日期：2023.11.28

Levi图标仓库地址：[levi.icons.json](https://raw.githubusercontent.com/czy13724/LeviIcons/main/levi.icons.json)
如果你觉得好用的话，不妨点个✨star，支持一下作者～
#### 功能
基于github action自动生成Quantmult X图标订阅。用于将对应仓库所有的图标raw整合为一个json文件，以便Quantumult X，Surge，Loon等软件的图标订阅导入。
#### 使用方法：
1. 新建一个仓库(以下以TEST为例)作为图床，并新建一个文件夹(以下以test为例)用于存储图片，可随意命名（~~不建议使用中文~~）。   
2. 点击`action`并创建一个工作流（workflow）,将下方代码放入并按照说明进行替换,并在`.github`该文件夹下创建`scripts`文件夹, 将generate_image_json.py放置到这里。
#### 详细教学：
下面是一个从0-1创建仓库、设置 GitHub Actions 工作流、并上传图片生成 JSON 的详细教程。
注意⚠️：下方所有的TEST和test需要全部替换，以下不再作出说明。TEST为仓库名称，test为该TEST仓库下放置图标的文件夹名称。

请按照以下步骤进行操作：

1.创建仓库

首先，登录 GitHub 并点击右上角的 "+" 按钮，选择 "New repository"或"Create Repository"，输入仓库名称为 TEST，添加一个简短的描述，并选择 "Public"（公共仓库）或 "Private"（私有仓库），然后点击 "Create repository"。

2.克隆仓库到本地(此处以本地拉取仓库为例；你还可以在云端自动创建，如选用云端方式则跳过这一步以及第六步。)

在你的本地机器上打开终端（或 Git Bash），执行以下命令：
```shell
#请替换 your-username 为你的 GitHub 用户名。
git clone https://github.com/your-username/TEST.git
cd TEST
```
3.创建 test 文件夹和上传图片文件

在克隆的仓库目录下创建一个名为 test 的文件夹，并在其中上传一些图片文件。你可以通过拖拽文件到 GitHub 网页界面上或使用命令行方式上传文件。

4.创建工作流配置文件

在仓库根目录下创建一个名为 .github/workflows/image_workflow.yml 的文件，将以下内容粘贴进去：
```shell
name: Image Workflow

on:
  push:
    paths:
      - 'test/**' 
  pull_request:
    paths:
      - 'test/**' 
  workflow_dispatch:

jobs:
  generate_json:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests

    - name: Generate JSON
      run: |
        python .github/scripts/generate_image_json.py

    - name: Load output variables
      run: |
        export $(dotenv -f output.env list)

    - name: Save state
      run: echo "ICONS_JSON_PATH=${ICONS_JSON_PATH}" >> $GITHUB_STATE

    - name: Upload artifact
      uses: actions/upload-artifact@v2
      with:
        name: json-artifact
        path: $ICONS_JSON_PATH

    - name: Show working directory contents (After generate_json.py)
      run: ls -R

    - name: Debug file existence and content
      run: |
        echo "Current working directory:" $(pwd)
        echo "List of files in the directory:" $(ls -R)
        cat $ICONS_JSON_PATH
```
5.创建脚本文件

在 .github/scripts 目录下创建一个名为 generate_image_json.py 的 Python 脚本，并将以下内容粘贴进去：
```shell
import os
import json

def generate_json():
    image_folder = 'test'
    json_data = {
        "name": "TEST图标订阅",
        "description": "收集一些自己常用的图标",
        "icons": []
    }

    for filename in os.listdir(image_folder):
        if filename.endswith(".png"):
            image_path = os.path.join(image_folder, filename)
            raw_url = f"https://raw.githubusercontent.com/{os.environ['GITHUB_REPOSITORY']}/main/{image_path}"
            icon_data = {"name": filename, "url": raw_url}
            json_data["icons"].append(icon_data)

    # Set the output path relative to the repository root
    output_path = os.path.join(os.getcwd(), 'test.icons.json')

    with open(output_path, 'w', encoding='utf-8') as json_file:
        json.dump(json_data, json_file, ensure_ascii=False, indent=2)

    # Save output data to the GITHUB_STATE environment file
    with open(os.environ['GITHUB_STATE'], 'a') as state_file:
        state_file.write(f"ICONS_JSON_PATH={output_path}\n")

if __name__ == "__main__":
    generate_json()
```
6.提交并推送更改

在终端执行以下命令：
```shell
git add .
#下方双引号内容可以作更改
git commit -m "Initialize repository with workflow and script"
git push origin main
```
7.查看工作流程

现在，你可以在 GitHub 仓库的页面上的 "Actions" 标签下看到工作流程的运行情况。你也可以手动触发工作流程，看看是否正常运行。可以正常运行后请上传一个图片文件查看是否可以自动运行工作流。之后就可以只上传图片到test下即可，工作流会自动运行并生成json文件，获取json的raw进行导入Quantumult X, Loon等软件订阅即可。

#### 注意事项
已知错误有：Upload Artifact这里报错可以通过修改路径或在仓库下新建一个package.json文件解决。

#### 免责声明

* 项目内所涉及脚本、LOGO 仅为资源共享、学习参考之目的，不保证其合法性、正当性、准确性；切勿使用项目做任何商业用途或牟利；
* 遵循避风港原则，若有图片和内容侵权，请在 Issues 告知，核实后删除，其版权均归原作者及其网站所有；
* 本人不对任何内容承担任何责任，包括但不限于任何内容错误导致的任何损失、损害;
* 其它人通过任何方式登陆本网站或直接、间接使用项目相关资源，均应仔细阅读本声明，一旦使用、转载项目任何相关教程或资源，即被视为您已接受此免责声明。
* 本项目内所有资源文件，禁止任何公众号、自媒体进行任何形式的转载、发布。
* 本项目涉及的数据由使用的个人或组织自行填写，本项目不对数据内容负责，包括但不限于数据的真实性、准确性、合法性。使用本项目所造成的一切后果，与本项目的所有贡献者无关，由使用的个人或组织完全承担。
* 本项目中涉及的第三方硬件、软件等，与本项目没有任何直接或间接的关系。本项目仅对部署和使用过程进行客观描述，不代表支持使用任何第三方硬件、软件。使用任何第三方硬件、软件，所造成的一切后果由使用的个人或组织承担，与本项目无关。
* 本项目中所有内容只供学习和研究使用，不得将本项目中任何内容用于违反国家/地区/组织等的法律法规或相关规定的其他用途。
* 所有基于本项目源代码，进行的任何修改，为其他个人或组织的自发行为，与本项目没有任何直接或间接的关系，所造成的一切后果亦与本项目无关。
* 所有直接或间接使用本项目的个人和组织，应24小时内完成学习和研究，并及时删除本项目中的所有内容。如对本项目的功能有需求，应自行开发相关功能。
* 本项目保留随时对免责声明进行补充或更改的权利，直接或间接使用本项目内容的个人或组织，视为接受本项目的特别声明。
